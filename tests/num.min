'test load
'test import

"num" describe

  (2 2 + 4 ==) assert
  (1 3.0 + 4 ==) assert
  (3.1 3.9 + 7 ==) assert
  (3 -2.1 + 0.8999999999999999 ==) assert

  (3 3 - 0 ==) assert
  (-5 -4 - -1 ==) assert
  (-4 3.7 - -7.7 ==) assert

  (-2 4 * -8 ==) assert
  (-2.5 -2 * 5 ==) assert
  (3 3 * 9 ==) assert

  (5 2 / 2.5 ==) assert
  (1 3 / 0.3333333333333333 ==) assert
  (-3 2 / -1.5 ==) assert

  (5 2 div 2 ==) assert
  (1 3 div 0 ==) assert
  (-3 2 div -1 ==) assert
  
  (5 2 mod 1 ==) assert
  (4 2 mod 0 ==) assert
  (-3 2 mod -1 ==) assert

  (1000 random 1000 <) assert

  ((1 2 3 4 5) sum 15 ==) assert

  ((1 2 3 4 5) product 120 ==) assert

  ((1 2 3 4 5) avg 3.0 ==) assert
  ((1 2 3 4 5 6) avg 3.5 ==) assert

  ((1 3 5 7) med 4.0 ==) assert
  ((1 3 5 7 9) med 5 ==) assert

  ((1 5) range (1 2 3 4 5) ==) assert
  ((5 1) range (5 4 3 2 1) ==) assert
  ((4 7) range (4 5 6 7) ==) assert
  ((7 4) range (7 6 5 4) ==) assert
  ((1 6 2) range (1 3 5) ==) assert
  ((1 6 3) range (1 4) ==) assert
  ((0 6 2) range (0 2 4 6) ==) assert
  ((6 1 2) range (6 4 2) ==) assert
  ((6 1 3) range (6 3) ==) assert
  ((6 0 2) range (6 4 2 0) ==) assert
  
  (2 3 bitand 2 ==) assert

  (123 bitnot -124 ==) assert

  (2 3 bitor 3 ==) assert

  (2 3 bitxor 1 ==) assert

  (2 3 shl 16 ==) assert

  (16 3 shr 2 ==) assert
  
  (0 :c
    (c 10 <) (c succ @c) while
    c 10 ==) assert

  ((1 2 3 4 5) (even?) filter (2 4) ==) assert

  ((1 2 3 4 5) (even?) any?) assert

  ((2 4 6 8) (even?) all?) assert

  report
  clear-stack
