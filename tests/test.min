"." :ok

(
  symbol padding
  (==>)
  ("  " print!)
) ::

(
  symbol describe
  ('sym :name ==> quot :out)
  (
    "Testing: [" print! name print! "]" puts! 
    padding
    () @out
  )
) ::

(
  symbol assert
  (quot :results quot :check ==> quot :out)
  (
   (
     (
       (check -> true ==)
       (format-error puts! false)
     ) try
   )
   ( 
     ok results append @results 
     "." print!
   )
   (
     check results append @results 
     "x" print!
   )
   if
   results @out
  )
) ::

(
  symbol report
  (quot :results ==>)
  (
    newline
    0 :total
    0 :failed
    results (
      total succ @total
      (ok !=) (failed succ @failed) () if
    ) map
    "$# tests executed - $# failed." (total failed) =% puts!
    (
      :result
      result
      (ok !=)
      (
         ('failures defined-symbol?) (failures succ @failures) () if
         padding "FAILED: " print! result puts!
      )
      ()
      if
    )
    map
    pop ;Remove results accomulator from get-stack
  )
) ::
